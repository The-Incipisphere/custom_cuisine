plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

boolean isBleedingEdge = System.getenv("BLEEDING_EDGE")
version = "${mod_version}" + (isBleedingEdge ? "-BLEEDINGEDGE" : "")
// boolean isCI = System.getenv("CI") != null
group = mod_group_id

repositories {
    flatDir {
        dir 'libs'
    }
    mavenLocal()
    mavenCentral()
    maven {
        name 'FirstDarkDev'
        url "https://maven.firstdark.dev/snapshots/"
    }
    maven {
        name = 'KubeJS and Rhino'
        url = "https://maven.latvian.dev/releases/"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        name = 'Registrate'
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
        }
    }
    maven {
        name = "Patchouli, JEI"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'CurseMaven'
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'EMI'
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = 'Architectury'
        url "https://maven.architectury.dev/"
        content {
            includeGroup "dev.architectury"
        }
    }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.20.1, so mods should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
    // Specify the version of MinecraftForge to use.
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime' and a deobfuscating one called 'modLocalRuntime'
// These configurations should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

dependencies {
    // JEI
    modCompileOnly("mezz.jei:jei-$project.minecraft_version-forge-api:$project.jei_version") { transitive = false }
    modCompileOnly("mezz.jei:jei-$project.minecraft_version-common-api:$project.jei_version") { transitive = false }
    modRuntimeOnly("mezz.jei:jei-$project.minecraft_version-forge:$project.jei_version") { transitive = false }
    // EMI
    modCompileOnly("dev.emi:emi-forge:$project.emi_version+$project.minecraft_version:api")
    modRuntimeOnly("dev.emi:emi-forge:$project.emi_version+$project.minecraft_version")

    // Registrate (uncomment if you need to use Registrate.)
    //modImplementation("com.tterrag.registrate:Registrate:$project.registrate_version")
    //jarJar(implementation("com.tterrag.registrate:Registrate")) {
    //    version {
    //        strictly("$project.registrate_version")
    //    }
    //}

    // KubeJS (and Architectury)
    modImplementation("dev.latvian.mods:kubejs-forge:$project.kubejs_version")
    modRuntimeOnly("dev.latvian.mods:rhino-forge:$project.rhino_version")
    modRuntimeOnly("dev.architectury:architectury-forge:$project.architectury_version")

    // Configuration (by Toma1O6)
    modImplementation("dev.toma.configuration:configuration-forge-$project.minecraft_version:$project.configuration_version")

    // Jade
    modImplementation("curse.maven:jade-324717:5876199") // Version 11.12.2

    // Cuisine Delight
    // I AM FUCKING DONE WITH TRYING TO IMPORT THIS SHIT
    // modImplementation("dev.kxmc.cuisinedelight:Cuisine-Delight:1.1.17")


    // Mixin Extras (not needed unless you're using Mixins)
    //implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:$project.mixinextras_version"))
    //implementation(include("io.github.llamalad7:mixinextras-forge:$project.mixinextras_version"))

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // Jetbrains Annotations
    compileOnly 'org.jetbrains:annotations:26.0.2'
}

// Uncomment the lines below if you wish to configure mixin. The mixin file should be named modid.mixins.json.
/*
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
}
*/

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version        : minecraft_version,
            minecraft_version_range  : minecraft_version_range,
            forge_version            : forge_version,
            forge_version_range      : forge_version_range,
            loader_version_range     : loader_version_range,
            mod_id                   : mod_id,
            mod_name                 : mod_name,
            mod_license              : mod_license,
            mod_version              : mod_version,
            mod_authors              : mod_authors,
            mod_description          : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata

// Uncomment & populate if you need Maven publishing.
//publishing {
//
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.register('printVersion') {
    doLast {
        println mod_version
    }
}

tasks.register('printModName') {
    doLast {
        println mod_name
    }
}
